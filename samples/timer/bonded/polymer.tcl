#############################################################
#  autogenerated:                                           #
#############################################################
# add in options later?
# backup_frequency : back it up every n runs
set backup_timer          20
#set n_part                1000
set int_n_times           100
set int_steps             10
set number_of_timers      10
set output_file           [open "simulation.output" "w"]
set backup_file           [open "simulation.backup" "w"]
set sim_nodes             1
set sim_procs             1

puts  $output_file "\{"
puts  $output_file "\"Nodes\":\"$sim_nodes\","
puts  $output_file "\"Processes\":\"$sim_procs\","
puts  $output_file "\"Backuprate\":\"$backup_timer\","
#puts  $output_file "\"Particles\":\"$n_part\","
puts  $output_file "\"Runs\":\"$int_n_times\","
puts  $output_file "\"IntPerRun\":\"$int_steps\","
flush $output_file

puts  $backup_file "\{"
puts  $backup_file "\"Nodes\":\"$sim_nodes\","
puts  $backup_file "\"Processes\":\"$sim_procs\","
puts  $backup_file "\"Backuprate\":\"$backup_timer\","
#puts  $backup_file "\"Particles\":\"$n_part\","
puts  $backup_file "\"Runs\":\"$int_n_times\","
puts  $backup_file "\"IntPerRun\":\"$int_steps\","
flush $backup_file



set monomer_density 0.85
set n_polymers  10
set n_beads 15
set polymer_bond_length 1.0
set monomer_type 0
set kT 1.0
set fene_cut 2.0
set fene_k 7.0




set box [expr (($n_polymers * $n_beads) / $monomer_density)**(1./3.)]

puts "box $box"

setmd time_step 0.01
setmd skin 0.4
setmd box_l $box $box $box
thermostat langevin $kT 0.5

inter 0 fene $fene_k $fene_cut

inter 0 0 lennard-jones 1.0 1.0 [expr 2.**(1./6.)] auto

puts [inter]

polymer $n_polymers $n_beads $polymer_bond_length types $monomer_type bond 0

puts [analyze energy]

#set energy_fd [open "energy.dat" "w"]

for { set i 0  }  { $i < 500 } { incr i } {
inter forcecap [expr 5.0 +$i * 0.5]
integrate 1000
#puts [analyze energy]

puts $i

#puts $energy_fd "[setmd time] [analyze energy total]"
#flush $energy_fd
}

puts [timer]

inter forcecap 0

timer reset

for { set i 0 } { $i < $int_n_times } { incr i } {
integrate $int_steps 

puts $i

if {$i%$backup_timer==0} {
    puts $backup_file "\"$i\": \["
    set n 1
    foreach t [timer] {
        puts $backup_file "  \["
        puts $backup_file "    \"[lindex $t 0]\","
        puts $backup_file "    \"[lindex $t 1]\","
        puts $backup_file "    \"[lindex $t 2]\","
        puts $backup_file "    \"[lindex $t 3]\","
        puts $backup_file "    \"[lindex $t 4]\","
        puts $backup_file "    \"[lindex $t 5]\","
        puts $backup_file "    \"[lindex $t 6]\","
        puts $backup_file "    \"[lindex $t 7]\","
        puts $backup_file "    \"[lindex $t 8]\""
        if {$n%[expr {$number_of_timers * $sim_procs}]} {
            puts $backup_file "  \],"
        } else {
            puts $backup_file "  \]"
        }
        incr n
    }
    puts $backup_file "  \],"
    flush $backup_file
}

#correlation $cor_sf autoupdate
# set c_times [correlation $cor_sf print correlation_time]
# 
# set max 0.0
# foreach c_time $c_times {
#   if { $c_time > $max } {
# 	  set max $c_time
#   }
# }
# 
# puts "c_time $max"

}

#close $energy_fd

puts $output_file "\"Data\": \["
set n 1
foreach t [timer] {
    puts $output_file "  \["
    puts $output_file "    \"[lindex $t 0]\","
    puts $output_file "    \"[lindex $t 1]\","
    puts $output_file "    \"[lindex $t 2]\","
    puts $output_file "    \"[lindex $t 3]\","
    puts $output_file "    \"[lindex $t 4]\","
    puts $output_file "    \"[lindex $t 5]\","
    puts $output_file "    \"[lindex $t 6]\","
    puts $output_file "    \"[lindex $t 7]\""
    if {$n%[expr {$number_of_timers * $sim_procs}]} {
        puts $output_file "  \],"
    } else {
        puts $output_file "  \]"
    }
    incr n
}
puts $output_file "\],"

puts $output_file "\"RunsTaken\":\"$i\","
puts $output_file "\"State\":\"SUCCESS\""
puts $output_file "\}"
flush $output_file

puts $backup_file "\}"
flush $backup_file

puts [timer]

puts "MPIPID FUNCTIONNAME MEAN STANDARD-DEVIATION VARIANCE MIN MAX #CALLS"
foreach t [timer] {
puts $t
}

